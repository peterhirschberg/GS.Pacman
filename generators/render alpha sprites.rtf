{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25580\viewh14480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // * Width: $28 bytes  Height: $28 lines\
const data = [\
[0x00,0x0F,0xFF,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x0F,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xF0],\
[0x00,0xF0,0x0F,0xF0,0x00,0x0F,0xFF,0x00,0x0F,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0x0F,0xFF,0xF0,0x0F,0xF0,0x00,0x00,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xF0,0x0F,0xF0,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x0F,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x0F,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xF0,0x00,0x00,0x00,0x00,0x0F,0xF0,0x0F,0xFF,0x00,0xF0,0x0F,0xF0,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x0F,0xFF,0xF0,0x0F,0xF0,0x0F,0xF0,0x00,0x00,0x00,0xFF,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0x0F,0xF0,0x00,0x0F,0x00,0xFF,0xFF,0x00,0x00,0x00,0xFF],\
[0x00,0xFF,0x00,0xF0,0x00,0x00,0xFF,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0x0F,0xF0,0x00,0x0F,0x00,0x00,0xFF,0x00,0x00,0x0F,0xF0],\
[0x00,0x0F,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0xF0,0x00,0x0F,0xF0,0x00,0x00,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x0F,0xFF,0x00,0x0F,0xFF,0xFF,0xF0,0x00,0x0F,0xFF,0xF0,0x0F,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF],\
[0x00,0xFF,0x0F,0xF0,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x0F,0xF0,0x0F,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xFF,0xFF,0xF0,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xF0,0x0F,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF],\
[0x0F,0xFF,0xFF,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x0F,0xF0,0x0F,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xFF,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x0F,0xF0,0x00,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xFF,0xFF,0xF0,0x00,0x0F,0xFF,0xF0,0x0F,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0x0F,0xF0,0x00,0x00,0x00,0x0F,0xFF,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xF0],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF],\
[0x0F,0xF0,0x0F,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xFF,0x0F,0xFF,0x0F,0xFF,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x0F,0xF0,0x00,0x00,0xFF,0x00],\
[0x0F,0xF0,0xFF,0x00,0x00,0xFF,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0x0F,0xFF,0xF0,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x00,0x00,0xFF,0x00],\
[0x0F,0xFF,0xF0,0x00,0x00,0xFF,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0x0F,0xFF,0xFF,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x0F,0xFF,0x00,0xFF,0xFF,0xF0,0x00,0x00,0xFF,0x00],\
[0x0F,0xFF,0xFF,0x00,0x00,0xFF,0x00,0x00,0x0F,0xF0,0xF0,0xFF,0x0F,0xF0,0xFF,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xFF,0xFF,0xF0,0x0F,0xF0,0xFF,0xFF,0x0F,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00],\
[0x0F,0xF0,0xFF,0xF0,0x00,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x0F,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x0F,0xF0,0x0F,0xF0,0xFF,0xF0,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00],\
[0x0F,0xF0,0x0F,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xF0,0x00,0x00,0x00,0xFF,0xFF,0x0F,0x0F,0xF0,0x0F,0xFF,0x00,0xFF,0xFF,0xF0,0x00,0x00,0xFF,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xF0,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xFF,0x0F,0xFF,0x00,0xFF,0x00,0xFF,0x00,0x00,0x0F,0xFF,0x00,0x00,0xFF,0xF0,0x0F,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0xF0,0xFF,0x00,0xFF,0xFF,0xF0,0x00,0xFF,0x00,0xFF,0x00,0x00,0xFF,0xF0,0x00,0x0F,0xFF,0x00,0xF0,0x0F,0xF0,0x0F,0xFF,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x0F,0xFF,0x0F,0xFF,0x0F,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xF0,0x00,0xF0,0xF0,0x00,0x0F,0xF0,0x00,0xF0,0x00,0xF0,0x00,0xF0,0x00],\
[0x0F,0xF0,0x00,0xFF,0x00,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xF0,0x00,0x00,0xFF,0x00,0x00,0xFF,0xF0,0x00,0x00,0x0F,0x00,0x00,0xF0,0xF0,0x00,0x0F,0xFF,0xFF,0x00,0x00,0xF0,0x00,0x0F,0xFF],\
[0x0F,0xF0,0x00,0xFF,0x00,0x0F,0xFF,0x00,0x0F,0xFF,0x0F,0xFF,0x0F,0xFF,0x0F,0xFF,0x00,0x00,0xFF,0x00,0x0F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F,0xF0,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00],\
[0x00,0xFF,0xFF,0xF0,0x00,0x00,0xF0,0x00,0x0F,0xF0,0x00,0xFF,0x0F,0xF0,0x00,0xFF,0x00,0x00,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0x00,0xF0,0x00,0x00,0x0F,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00,0xF0,0x00,0xFF,0xFF],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0xFF,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x0F,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x0F,0xFF,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0xF0,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\
]\
\
let str = '\\n'\
let str2 = '\\n'\
\
// * Width: $28 bytes  Height: $28 lines\
\
function renderSprite(index, name) \{\
\
	let rowOffset = Math.floor((index * 4) / 0x28) * 8\
  let colOffset = (index * 4) % 0x28\
  \
//  console.log('sprite: ' + index + ' row: ' + rowOffset + ' col: ' + colOffset)\
  \
	str += name + ' entry\\n\\n'\
\
	str += '		spriteGetDrawAddress\\n'\
	str += '		_spriteHeader\\n\\n'\
\
	let cx = 0\
  let cy = 0\
\
	const height = 8\
  const width = 8\
  \
  for (let y=0; y<height; y++) \{\
  \
	  const row = data[rowOffset + y]\
\
  	let lastByte = -1\
    \
    let rowHasStuff = false\
\
		if (true) \{\
      str += '\\n'\
      str += '		lda drawAddress\\n'\
      str += '		clc\\n'\
      str += `		adc #$\{y*160\}\\n`\
      str += '		tcd\\n\\n'      \
\
      str += '		short m\\n'\
\
      for (let x=0; x<width/2; x++) \{\
      	let color\
      \
        const byte = row[x+colOffset]\
        let hex = Number(byte).toString(16);\
        if (hex.length < 2) \{\
          hex = "0" + hex;\
        \}\
        \
        switch(hex)\{\
        	case '00':\
          	str2 += '  '\
            color = '#$00'\
            break\
        	case '0f':\
          	str2 += ' X'\
            color = 'spriteLowColor'\
            break\
        	case 'f0':\
          	str2 += 'X '\
            color = 'spriteHighColor'\
            break\
        	case 'ff':\
          	str2 += 'XX'\
            color = 'spriteBothColor'\
            break\
				\}\
\
        if (byte != lastByte) \{\
          lastByte = byte\
          str += `		lda $\{color\}\\n`\
        \}\
\
        str += `		sta $\{x\}\\n`      \
      \}\
      str += '		long m\\n'\
		\}\
    str2 += '\\n'\
	\}\
\
  str += '\\n'\
\
	str += '		long m\\n'\
  \
  str += '\\n'\
  str += '		_spriteFooter\\n'\
  str += '		rtl\\n\\n'\
\
\}\
\
function renderSprites () \{\
	for (let sprite=0; sprite<50; ++sprite) \{\
  	renderSprite(sprite, `drawAlphaSprite$\{sprite\}`)\
	\}\
\}\
\
renderSprites()\
\
console.log(str)\
//console.log(str2)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}